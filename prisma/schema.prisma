generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  patronymic String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  position    String
  status      String?
  sex         UserSex
  createdAt   DateTime     @default(now())
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime

  personalTrainings PersonalTraining[] @relation("StudentTrainings")
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  patronymic String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  position  String
  qualification String?
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
  birthday  DateTime
}

model Coach {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  patronymic String
  email     String?   @unique
  phone     String?   @unique
  address   String
  img       String?
  position  String?
  qualification String?
  achievements String?
  sex       UserSex
  createdAt DateTime  @default(now())
  disciplines  Disciplines[]
  lessons   Lesson[]
  birthday  DateTime

  personalTrainings PersonalTraining[] @relation("CoachTrainings")
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classes Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Disciplines {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  coaches  Coach[]
  lessons  Lesson[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int?
  disciplineId Int? 
  subject     Subject?      @relation(fields: [subjectId], references: [id])
  disciplines     Disciplines?      @relation(fields: [disciplineId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String?
  coachId     String?
  teacher     Teacher?      @relation(fields: [teacherId], references: [id])
  coach       Coach?      @relation(fields: [coachId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
  @@index([teacherId])
  @@index([coachId])
  @@index([classId])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
  @@index([lessonId])
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime

  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  results  Result[]
}

model Result {
  id    Int @id @default(autoincrement())
  score Int

  examId       Int?
  exam         Exam?       @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime

  classId Int?
  class   Class? @relation(fields: [classId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
  day     Int

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model VideosLibrary {
  id      Int      @id @default(autoincrement())
  title     String
  thumbnail String
  videoUrl  String

  createdAt   DateTime     @default(now())
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalTraining {
  id              Int              @id @default(autoincrement())
  title           String
  description     String?
  recommendations String?
  createdAt       DateTime         @default(now())

  studentId String
  student   Student  @relation("StudentTrainings", fields: [studentId], references: [id])

  coachId   String
  coach     Coach    @relation("CoachTrainings", fields: [coachId], references: [id])

  files     TrainingFile[]
}

model TrainingFile {
  id            Int      @id @default(autoincrement())
  url           String
  originalName  String
  fileType      String
  trainingId    Int
  training      PersonalTraining @relation(fields: [trainingId], references: [id], onDelete: Cascade)
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}